@page "/ViewAdults"
@using global::Models
@using Models
@using Client1.Data.AdultsData

@inject IAdults IAdults
@inject NavigationManager NavigationManager

<h3>Search for an Adult</h3>

<p>Filter by User Id : <input type="number" @oninput="@((arg)=>FilterByUserId(arg))" style="width: 50px"/></p>



@if (AdultsToShow == null)
{
    <p>
        <em>Loading ...</em>
    </p>
}else if (!AdultsToShow.Any())
{
    <p>
        <em>No one found...</em>
    </p>
    }
else
{
    <table class="table">
        <thead>
        <tr>
            <th> ID</th>
            <th>FirstName</th>
            <th>LastName</th>
            <th>Haircolor</th>
            <th>Eyecolor</th>
            <th>Age</th>
            <th>Weight</th>
            <th>Height</th>
            <th>Sex</th>
            <th>Edit</th>
            <AuthorizeView><th>Remove</th></AuthorizeView>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in AdultsToShow)
        {
            <tr>
                <td>
                    @item.Id
                </td>
                <td>@item.FirstName</td>
                <td>@item.LastName</td>
                <td>@item.HairColor</td>
                <td>@item.EyeColor</td>
                <td>@item.Age</td>
                <td>@item.Weight</td>
                <td>@item.Height</td>
                <td>@item.Sex</td>
                <td> <button @onclick="@(() => Edit(item.Id))">
                                            <i class="oi oi-pencil" style="color: #1b6ec2"/>
                                        </button></td>
                <td>
                    <AuthorizeView> <button @onclick="@(() => RemoveAdult(item.Id))">
                        <i class="oi-oi-trash" style="color: #ff0000"/>
                    </button>
                    </AuthorizeView>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private IList<Adult> allAdults;
    private IList<Adult> AdultsToShow;

   

    private void FilterByUserId(ChangeEventArgs changeEventArgs)
    {
        int? filterbyId = null;
        try
        {
            filterbyId = int.Parse(changeEventArgs.Value.ToString());
        }
        catch (Exception e)
        {
        }
        if (filterbyId != null)
        {
            AdultsToShow = allAdults.Where(t => t.Id == filterbyId).ToList();
        }
        else
        {
            AdultsToShow = allAdults;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        allAdults = await IAdults.GetAdults();
        AdultsToShow = allAdults;
    }
   
     private void RemoveAdult(int AdultId)
    {
        Adult adultToRemove = allAdults.First(t => t.Id == AdultId);
        // IAdults.RemoveAdult(AdultId);
        allAdults.Remove(adultToRemove);
        AdultsToShow.Remove(adultToRemove);
    }

    private void Edit(int id)
    {
        NavigationManager.NavigateTo($"Edit/{id}");
    }
    

}